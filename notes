The objective is to play with Akka for concurrency and scale.

The project is a MUD with many monsters running around.
To remove the need for a novel/awkward HCI, collision detection, graphics and so on it will use a CircleMUD-style "rooms and zones" topology. For further simplicity, the topology will always be arrayed in a 2D-grid (a third dimension can be added if this ends up being fun, with the only changes being to pathfinding). Interactions will be limited to the same "room".

1- create a supervision tree with N do-nothing children, sleep(3), kill rand(1, N-1) children and observe restarts
    how do we specify restart strategies?
        override "public SupervisorStrategy supervisorStrategy()"
        a SupervisorStrategy must return:
            - max retries
            - during a time duration
            - a Function (functional wrapper for a method) which:
                - accepts Throwable t
                - returns one of the static objects from SupervisorStrategy
                    - resume / restart / stop / escalate
    can we / how do we recover state when restarting?
        akka.persistence
            plugins for journal and snapshots: http://akka.io/community/#journal_plugins
            let's use in-memory for journal
            let's use something easy for snapshots
        create declarative events for each state-change, and persist them in a journal
        all events must be Serializable
            this also means they should be top-level classes
                or if not, their outer class should also be serializable
        for each event, there must be both a "normal" and a "recovery" procedure
            "normal" is passed in as a Procedure<...> object
            "recovery" is handled by onReceiveRecover(Object msg)
    how do we kill children?
        send an akka.actor.Kill.getInstance() message
            causes an ActorKilled exception, fault handling ensues
        invoke akka.actor.ActorContext.stop(ActorRef ref)
            causes an orderly shutdown
            is asynchronous; call watch() on the stopping actor to know when it's actually done
        send an akka.actor.PoisonPill message
            enqueued as a normal message, processed as stop() when it's read
    how do we report crashes?
        create our own logging framework (ReportLogger), or suffer under the legacy of syslog
        http://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying
        http://letitcrash.com/post/54348001688/2-2-spotlight-logging-of-actor-failures

2- create a Router for each child, have all children subscribe to one another, emit a message every rand(1, 10) seconds, react to messages amusingly (children are now mobile entities)
    how do we create dynamic subscriptions?

3- create a separate "zone" supervision tree, with one "room", which contains a list of mobile entities (all the existing ones); all entities in the "room" should also know which "room" they are in
    how do we track a reference to something which might die, and obtain a new reference to its replacement?
        goes for the room tracking mobiles, and for mobiles tracking their rooms

4- create a second "room", and program mobiles to occasionally move from one room to the other by updating their membership in both rooms
    this operation cannot be atomic, can it?
        perhaps enter the other room before leaving the first one... that makes sense, actually

5- create a snapshot of all current state, including rooms and entities
